{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","useState","base_link","latlong_addon","version","colkeys","rows","adres","state","Alert","elevation","variant","circularProgressStyles","makeStyles","theme","root","display","marginLeft","spacing","haalJSON","JSONdata","filter","postcode","jqxhr","$","getJSON","done","console","log","responseJSON","features","length","message","properties","woonplaats","severity","Object","keys","show","openbare_ruimte","fadeIn","setOpen","setTimeout","handleClose","hide","circularProgressClasses","React","open","event","reason","tableClasses","table","minWidth","tableStyles","Fragment","Grid","container","direction","justify","alignItems","TextField","id","placeholder","label","Button","onClick","val","replace","toUpperCase","match","color","size","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","TableBody","map","item","key","scope","bouwjaar","huisnummer","huisletter","status","oppervlakte","gebruiksdoel","CircularProgress","Snackbar","autoHideDuration","onClose","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.277b2c23.chunk.js","sourcesContent":["import React, { useState } from 'react';\n//import { findDOMNode } from 'react-dom';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport $ from 'jquery';\n\nimport './App.css';\n\nconst App = props => {\n    const [state, setState] = useState({\n        base_link: 'https://geodata.nationaalgeoregister.nl/bag/wfs/v1_1?service=WFS&request=GetFeature&typeName=bag:verblijfsobject&count=100&outputFormat=json',\n        latlong_addon: '&srsName=EPSG:4326',\n        version: '&version=2.0.0',\n        colkeys: [],\n        rows: [],\n        adres: '',\n    });\n\n    //voor de snackbar\n    function Alert(props) {\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n    }\n\n    //snackbar styles\n    // const snackbarStyles = makeStyles(theme => ({\n    // \troot: {\n    // \t  width: '100%',\n    // \t  '& > * + *': {\n    // \t\tmarginTop: theme.spacing(2),\n    // \t  },\n    // \t},\n    // }));\n\n    //voor de spinner\n    const circularProgressStyles = makeStyles(theme => ({\n        root: {\n            display: 'flex',\n            '& > * + *': {\n                marginLeft: theme.spacing(2),\n            },\n        },\n    }));\n\n    // doet de postcode controle\n    // laat de spinner zien\n    // laat eventueel een snackbar alert zien\n    // roept de haalJSON functie aan\n    const postcodeCheck = postcode => {\n        $('#table').hide();\n        $('#adres').hide();\n        $('#spinner').show(200);\n        postcode = $('#postcode').val().replace(/ /g, '').toUpperCase();\n        if (!postcode.match(/^[1-9]\\d{3}[A-Z]{2}$/)) {\n            console.log('postcode niet goed');\n            $('#spinner').hide(200);\n            state.message = 'ongeldige postcode';\n            state.severity = 'error';\n            setOpen(true);\n        } else {\n            state.postcode = postcode;\n            haalJSON();\n            console.log('postcode wel goed');\n        }\n    };\n\n    // haal de data op met de link en parameters\n    // laat een snackbar alert zien\n    const haalJSON = JSONdata => {\n        //var filter = \"&cql_filter=(postcode = '\" + state.postcode +\"')\";\n        let filter = \"&filter=<Filter><PropertyIsEqualTo><PropertyName>postcode</PropertyName><Literal>\" + state.postcode + \"</Literal></PropertyIsEqualTo></Filter>\";\n\n        var jqxhr = $.getJSON(state.base_link + filter + state.version);\n\n        jqxhr.done(function () {\n            console.log('ik ben klaar');\n            if (jqxhr.responseJSON.features.length > 0) {\n                state.message = 'ik heb ' + jqxhr.responseJSON.features.length + ' gebouwen gevonden in ' + jqxhr.responseJSON.features[0].properties.woonplaats;\n                state.severity = 'success';\n                //console.log(Object.keys(jqxhr.responseJSON.features[0].properties));\n                state.colkeys = Object.keys(jqxhr.responseJSON.features[0].properties);\n                state.rows = jqxhr.responseJSON.features;\n                $('#adres').show();\n                state.adres = jqxhr.responseJSON.features[0].properties.openbare_ruimte + ' ' + jqxhr.responseJSON.features[0].properties.woonplaats;\n                $('#table').fadeIn(500);\n\n            } else {\n                state.message = 'ik heb geen gebouwen gevonden';\n                state.severity = 'error';\n            }\n            setOpen(true);\n            setTimeout(handleClose, 5000);\n\n            $('#spinner').hide(200);\n            console.log(jqxhr.responseJSON.features);\n        });\n    }\n\n    const circularProgressClasses = circularProgressStyles();\n    //const snackbarClasses = snackbarStyles();\n    const [open, setOpen] = React.useState(false);\n\n    // const handleClick = () => {\n    // \tsetOpen(true);\n    // };\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    const tableStyles = makeStyles({\n        table: {\n            minWidth: 650,\n        },\n    });\n\n    // function createData(name, calories, fat, carbs, protein) {\n    // \treturn { name, calories, fat, carbs, protein };\n    // }\n\n    // const rows = [\n    // \tcreateData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n    // \tcreateData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n    // \tcreateData('Eclair', 262, 16.0, 24, 6.0),\n    // \tcreateData('Cupcake', 305, 3.7, 67, 4.3),\n    // \tcreateData('Gingerbread', 356, 16.0, 49, 3.9),\n    // ];\n\n    const tableClasses = tableStyles();\n\n    let content = (\n        <React.Fragment>\n\n            <h4>Basisregistratie Adressen en Gebouwen</h4>\n\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n            >\n\n                <TextField id=\"postcode\" placeholder=\"1234 AA\" variant=\"filled\" label=\"Postcode\" />\n\t\t\t\t&nbsp;\n\t\t\t\t<Button onClick={postcodeCheck} variant=\"contained\" color=\"primary\" size=\"large\">\n                    Zoek\n\t\t\t\t</Button>\n            </Grid>\n\n            <p>\n                <span variant=\"outlined\" id=\"adres\">{state.adres}</span>\n            </p>\n\n            <TableContainer component={Paper} id=\"table\">\n                <Table className={tableClasses.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            {/* {state.colkeys.map((item, key) =>\n\t\t\t\t\t\t\t<TableCell key={key}>{item}</TableCell>\n\t\t\t\t\t\t)} */}\n                            <TableCell>Bouwjaar</TableCell>\n                            <TableCell>Adres</TableCell>\n                            <TableCell>Status</TableCell>\n                            <TableCell>Oppervlakte</TableCell>\n                            <TableCell>Gebuiksdoel</TableCell>\n\n                            {/* <<TableCell>>Dessert (100g serving)</TableCell>\n\t\t\t\t\t\t<TableCell align=\"right\">Calories</TableCell>\n\t\t\t\t\t\t<TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n\t\t\t\t\t\t<TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n\t\t\t\t\t\t<TableCell align=\"right\">Protein&nbsp;(g)</TableCell> */}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {state.rows.map((item, key) =>\n                            <TableRow key={key}>\n                                {/* <TableCell component=\"th\" scope=\"row\">\n\t\t\t\t\t\t\t{item.id}\n\t\t\t\t\t\t</TableCell> */}\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {item.properties.bouwjaar}\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {item.properties.openbare_ruimte + ' ' + item.properties.huisnummer + ' ' + (item.properties.huisletter === null ? '' : item.properties.huisletter)}\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {item.properties.status}\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {item.properties.oppervlakte}\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {item.properties.gebruiksdoel}\n                                </TableCell>\n\n                                {/* {state.colkeys.map((dingie, sleutel) =>\n\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">\n\t\t\t\t\t\t\t\t{item.{dingie}}}\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t)} */}\n\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            <div id=\"progressContainer\" className={circularProgressClasses.root}>\n                <CircularProgress id=\"spinner\" color=\"secondary\" />\n            </div>\n\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity={state.severity}>\n                    {state.message}\n                </Alert>\n            </Snackbar>\n\n        </React.Fragment>\n    );\n\n    return content;\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}